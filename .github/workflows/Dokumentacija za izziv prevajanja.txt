Uvod

Do nas so pristopili dobri možje iz podjetja Business solutions d.o.o. in nam zastavili nekaj izzivov. Izbrali smo si izziv za avtomatsko prevajanje dokumentacije v izbran jezik. Izziv izhaja iz tega, da ima podjetje podružnice po vseh balkanskih državah in bi radi avtomatizirali postopek prevajanja dokumentacije za vsako od teh držav.

Priprava

Za reševanje smo se odločili na GitHubu narediti repository, kjer se nahaja skripta, ki se požene vsakič, ko nekdo od pripadnikov mape uporabi git ukaz za shranjevanje, tj. git push na datoteko z dokumentacijo. Skripta je napisana v programskem jeziku Python in deluje s pomočjo Googlovega modula googletrans. Za inštalacijo smo uporabili ukaz pip install googletrans.

Delovanje

.yml datoteka deluje tako, da se ob spremembi na datoteki dokumentacija.md, specifično ob ukazu push sproži dogodek. Namesti se python in posodobi pip modul s knjižnico googletrans. Zažene skripto za prevajanje in na koncu doda globalne nastavitve za git (uporabniško ime in elektronski naslov). Prevedene datoteke doda v git, ustvari nov commit in ga potisne v repository.

Skripta je bila optimizirana s pomočjo GitHub Actions. Naredili smo neko poljubno akcijo, kjer se potem ustvari nova datoteka s končnico .yml in tam definirali kaj naj se namesti za delovanje avtomatizacije in definirali kaj se dogaja z datotekami. 
  
Za delovanje skripte moramo uvoziti tri module: os (za delo z datotekami), googletrans (za prevajanje besedila v druge jezike) in sys. 
Skripta je v delovanju zelo preprosta, za uspešno delovanje je zadoščala ena sama funkcija, imenovana translate_file. Ta funkcija skrbi za ustvarjanje datotek za prevod, prevajanje in pisanje v datoteke. Funkcija vzame tri vhodne parametre - ime izvorne datoteke, katere vsebino bomo prevajali, kodo jezika, katere vrednost moramo podati modulu googletranslate, da mu povemo, v kateri jezik mora vsebino datoteke prevesti ter ime izhodne datoteke, v katero bomo prevod zapisali.

V začetku funkcije najprej preverimo, če podana vhodna datoteka obstaja. Če datoteka ne obstaja, skripto ustvarimo in v terminal izpišemo sporočilo, zakaj se je program ustavil.

Nato v spremenljivki translator inicializiramo nov objekt razreda Translator(). To spremenljivko bomo pozneje klicali, ko bomo želeli prevesti vsebino vhodne datoteke v ciljni jezik.

Nato odpremo izvorno datoteko v bralnem načinu z 'utf-8' enkodiranjem, saj je dokumentacija verjetno v slovenščini in bo verjetno vsebovala šumnike. V spremenljivko text shranimo vsebino izvorne datoteke s pomočjo funkcije read().

Ko je vsebina datoteke shranjena v spremenljivki text, lahko vsebino te spremenljivke prevedemo. V novo spremenljivko translated, s pomočjo funkcije translate() razreda Translator(), shranimo prevod dokumentacije v podanem jeziku. Kot parametre moramo funkciji translate() podati besedilo, katerega želimo prevesti, ter kodo jezika za prevod. Kode jezikov modula googletrans so na voljo na naslednji povezavi: https://developers.google.com/admin-sdk/directory/v1/languages

Če smo dokumentacijo že posodabljali, datoteke za prevod verjetno že obstajajo, sicer pa jih mora skripta ustvariti. Za to skrbi naslednji del skripte. Če datoteka obstaja, preverimo s pomočjo funckije .isFile(ime datoteke) razreda os. Če datoteka ne obstaja, skripta uporabnika o tem obvesti in nato ustvari novo datoteko z ustreznim imenom.

V naslednjem delu skripte v ustrezno datoteko zapišemo prevod dokumentacije. Datoteko odpremo v načinu za pisanje, z enkodiranjem 'utf-8'. Za pisanje uporabimo ukaz datoteka.write(besedilo za pisanje). Ko je prevod uspešno zapisan v datoteko, uporabnika o tem obvestimo.

Zadnji del skripte je funkcija main, kjer se izvaja program za poganjanje skripte. Najprej definiramo, kakšna imena skript za prevode želimo in jih shranimo v ustrezne spremenljivke. Za demonstracijo delovanja smo zaenkrat ustvarili samo srbski in hrvaški prevod. Datoteke smo poimenovali kar "dokumentacija_" in jezikovna koda ustreznega jezika. Kot zadnje pa še poženemo funkcijo translate_file za hrvaški in skrbski prevod.

Testiranje

Program smo testirali tako, da smo na datoteki dokumentacija.md, spremenili besedilo in spremembe potisnili na git mapo. Izvedla se je akcija, ki se zažene ob ukazu git push in v mapi se je ustvarila nova datoteka dokumentacija_hr.md, ker smo izbrali prevod v hrvaški jezik. 